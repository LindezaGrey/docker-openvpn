#!/bin/bash


# Check if script was invoked correctly
if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ]; then
  echo 'one or more variables are undefined'
  exit 1
fi

OrderNo="$1" # Identifier for cotainer and invoice
HostIP="$2" # IP of the server running the docker host
NoOfClients="$3" # Number of Client Files that are generated
ContainerTimeout="$4"
#Product="$4" # Type of VPN

# labels for the container
StartDate=$(date "+%Y-%m-%d %H:%M:%S")
DeathDate=$(date -d "+"$ContainerTimeout" seconds" "+%Y-%m-%d %H:%M:%S")

# Prepare configs
docker volume create --name ovpn-data-$OrderNo
docker run -v ovpn-data-$OrderNo:/etc/openvpn --log-driver=none --rm vpn ovpn_genconfig -u udp://$HostIP -t -c
docker run -v ovpn-data-$OrderNo:/etc/openvpn --log-driver=none --rm -it vpn ovpn_initpki nopass

# start subshell which stops container and removes volume
(sleep $ContainerTimeout;docker stop $OrderNo >/dev/null; docker volume rm ovpn-data-$OrderNo >/dev/null) & 
# Start the VPN and set timer
docker run -v ovpn-data-$OrderNo:/etc/openvpn -d -p 1194/udp --name $OrderNo \
--label StartDate="$StartDate" --label DeathDate="$DeathDate" --cap-add=NET_ADMIN --rm vpn

 # gets the exposed port of the specified container
UsedPort="$(docker inspect --format="{{(index (index .NetworkSettings.Ports \"1194/udp\") 0).HostPort}}" $OrderNo)"

# Retrieve Client files

counter=0
while [  $counter -lt $NoOfClients ]; do
    let counter=counter+1 
    docker run -v ovpn-data-$OrderNo:/etc/openvpn --log-driver=none --rm -it vpn easyrsa build-client-full "$OrderNo"_client_$counter nopass
    docker run -v ovpn-data-$OrderNo:/etc/openvpn --log-driver=none --rm vpn ovpn_getclient "$OrderNo"_client_$counter > "$OrderNo"_client_$counter.ovpn $UsedPort
done